---
title: "Анализ данных сетевого трафика при помощи библиотеки Arrow"
author: "KDA"
format: 
  md:
    output-file: README.md
---

## Цель

1.  Развить практические навыки использования языка программирования R для обработки данных
2.  Закрепить знания базовых типов данных языка R
3.  Развить практические навыки использования функций обработки данных пакета `dplyr` – функции `select(), filter(), mutate(), arrange(), group_by()`

## ️Исходные данные

1.  R 4.4.1
2.  RStudio 2024.04.2+764

## ️Общий план выполнения

Используя R и среду разработки RStudio IDE, выполнить задания.

## Содержание ЛР

### Шаг 1: Настройка рабочего окружения

1.  **Установить программный пакет arrow с помощью:**

    -   интерфейса RStudio IDE

2.  **Получим данные**

```{r}
library(arrow) 
library(dplyr)
```



```{r}
path <- file.path("D:", "C practise", "datasets", "tm_data.pqt")
net_data <- read_parquet(path, as_data_frame = FALSE)
```

### Шаг 2: Выполнение заданий

1.  **Надите утечку данных из Вашей сети**

Важнейшие документы с результатами нашей исследовательской деятельности в области создания вакцин скачиваются в виде больших заархивированных дампов. Один из хостов в нашей сети используется для пересылки этой информации – он пересылает гораздо больше информации на внешние ресурсы в Интернете, чем остальные компьютеры нашей сети. Определите его IP-адрес

```{r}
net_data %>% 
  filter(grepl("^1[2-4]\\..+", src) & !grepl("^1[2-4]\\..+", dst)) %>%
  group_by(src) %>%
  summarise(traffic = sum(bytes)) %>%
  arrange(desc(traffic)) %>%
  head(1) %>%
  select(src) %>%
  knitr::kable()
```

2.  **Найдите утечку данных 2**

Другой атакующий установил автоматическую задачу в системном планировщике cron для экспорта содержимого внутренней wiki системы. Эта система генерирует большое количество трафика в нерабочие часы, больше чем остальные хосты. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителя из предыдущей задачи.

```{r}
net_data %>%
  filter(!str_detect(src, "^13.37.84.125") &
           (grepl("^1[2-4]\\..+", src) &
              !grepl("^1[2-4]\\..+", dst))) %>%
  mutate(timestamp = as.POSIXct(timestamp / 1000, origin = "1970-01-01", tz = "UTC")) %>%
  mutate(hour = format(timestamp, "%H")) %>% 
  
  
```
```{r}
library(lubridate)
library(ggplot2)

# Предположим, что ваш датасет называется net_data
# net_data <- read.csv("path_to_your_data.csv") # Загрузка данных

# Преобразование временной метки в формат POSIXct
net_data <- net_data %>%
  mutate(timestamp = as_datetime(timestamp/1000))

# Извлечение часа из временной метки
net_data <- net_data %>%
  mutate(hour = hour(timestamp))
```

```{r}
# Группировка данных по часам и подсчет общего трафика
hourly_traffic <- net_data %>%
  group_by(hour, na.rm = TRUE) %>%
  summarise(total_bytes = sum(bytes, na.rm = TRUE))
#glimpse(hourly_traffic)
# Визуализация распределения трафика по часам
#ggplot(hourly_traffic, aes(x = hour, y = total_bytes)) +
#  geom_line() +
#  labs(title = "Распределение трафика по часам", x = "Час", y = "Общий трафик (байты)")

# Определение порога для нерабочих часов (например, ниже 10% от максимума)
threshold <- max(hourly_traffic$total_bytes) * 0.1

# Определение нерабочих часов
non_working_hours <- hourly_traffic %>%
  filter(total_bytes < threshold) %>%
  pull(hour)

non_working_hours %>%
  knitr::kable()
# Фильтрация данных по нерабочим часам и группировка по IP-адресам
result <- net_data %>%
  filter(hour %in% non_working_hours) %>%
  group_by(src) %>%
  summarise(total_bytes = sum(bytes, na.rm = TRUE)) %>%
  arrange(desc(total_bytes))

# Получение IP-адреса с наибольшим количеством трафика
top_ip <- result %>%
  slice(1)

print(top_ip)

```


3.  **Надите утечку данных 3**

Еще один нарушитель собирает содержимое электронной почты и отправляет в Интернет используя порт, который обычно используется для другого типа трафика. Атакующий пересылает большое количество информации используя этот порт, которое нехарактерно для других хостов, использующих этот номер порта. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителей из предыдущих задач.

```{r}
for (df in ls("package:nycflights13")) {
      cat(df, "->", ncol(get(df)), "\n")
    }
```



## ️Оценка результата

Провели анализ сетевого трафика с помощью библиотеки arrow

## ️Вывод

1.  Установлен пакет arrow
2.  Выполнены задания
3.  Составлен отчет
